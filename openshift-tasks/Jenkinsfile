//def GUID = "b63e"
//def mvnCmd      = "mvn -s ./nexus_settings.xml"
//def devProject  = "${GUID}-tasks-dev"
//def prodProject = "${GUID}-tasks-prod"
//imageName   = "${GUID}-tasks"
//def devTag      = "0.0-0"
//def prodTag     = "0.0"
//def destApp     = "tasks-green"
//def activeApp   = ""

pipeline {
    agent {
    // Using the Jenkins Agent Pod that we defined earlier
    label "maven-appdev"
  }
 environment {
 
def GUID = "b63e"
def mvnCmd      = "mvn -s ./nexus_settings.xml"
def devProject  = "${GUID}-tasks-dev"
def prodProject = "${GUID}-tasks-prod"
imageName   = "${GUID}-tasks"
def devTag      = "0.0-0"
def prodTag     = "0.0"
def destApp     = "tasks-green"
def activeApp   = ""
 }
  stages {
    // Checkout Source Code.
    stage('Checkout Source') {
      steps {
        checkout scm
        echo "The code has been checked out"

        script {
            def pom = readMavenPom file: './openshift-tasks/pom.xml'
            def version = pom.version

            // Set the tag for the development image: version + build number
            devTag  = "${version}-" + currentBuild.number
            // Set the tag for the production image: version
            prodTag = "${version}"

            // Patch Source artifactId to include GUID
            sh "sed -i 's/GUID/${GUID}/g' ./openshift-tasks/pom.xml"
          }

      }
    }

    // Build the Tasks Application in the directory 'openshift-tasks'
    stage('Build war') {
      steps {
         sh '''cd openshift-tasks
         ${mvnCmd} clean package -DskipTests=true''' 
      }

    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      steps {
        echo "Running maven tests"
       //  sh '''cd openshift-tasks
       //  ${mvnCmd} test''' 
      }
    }
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      steps {
         echo "code analysis"
       
      //   sh '''cd openshift-tasks
        // ${mvnCmd} sonar:sonar -Dsonar.host.url=http://homework-sonarqube.apps.shared.na.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}''' 
       
      }
    }
    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      steps {
          echo "Publish to Nexus"
         sh '''cd openshift-tasks
         ${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://homework-nexus.gpte-hw-cicd.svc.cluster.local:8081/repository/releases''' 

        }
      }
    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      steps {
               echo "Building OpenShift container image tasks:${devTag}"

         // Start Binary Build in OpenShift using the file we just published
            // The filename is openshift-tasks.war in the 'target' directory of your current
            // Jenkins workspace
            script {
              openshift.withCluster() {
                openshift.withProject("${devProject}") {
                  openshift.selector("bc", "tasks").startBuild("--from-file=./openshift-tasks/target/openshift-tasks.war", "--wait=true")
                  openshift.tag("${GUID}-tasks:latest", "${GUID}-tasks:${devTag}")
        
              }
           }
       } 
        }
      }
    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
    steps {
    echo "Deploying container image to Development Project"
    script {
      // Update the Image on the Development Deployment Config
      openshift.withCluster() {
        openshift.withProject("${devProject}") {
          openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/${GUID}-tasks:${devTag}")


          openshift.selector('configmap', 'tasks-config').delete()
          def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./openshift-tasks/configuration/application-users.properties', '--from-file=./openshift-tasks/configuration/application-roles.properties' )

          // Deploy the development application.
          sh 'oc set env dc/tasks VERSION=${devTag} (tasks-dev)'
          openshift.selector("dc", "tasks").rollout().latest();

          // Wait for application to be deployed
          def dc = openshift.selector("dc", "tasks").object()
          def dc_version = dc.status.latestVersion
          def rc = openshift.selector("rc", "tasks-${dc_version}").object()

          echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
          while (rc.spec.replicas != rc.status.readyReplicas) {
            sleep 5
            rc = openshift.selector("rc", "tasks-${dc_version}").object()
          }
        }
      }
    }
  }
    }

    // Copy Image to Nexus Container Registry
    stage('Copy Image to Nexus Container Registry') {
      steps {
           echo "Copy image to Nexus Container Registry"
            script {
              sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:redhat docker://image-registry.openshift-image-registry.svc.cluster.local:5000/${devProject}/${GUID}-tasks:${devTag} docker://homework-nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/${GUID}-tasks:${devTag}"
        
              // Tag the built image with the production tag.
              openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                  openshift.tag("${devProject}/${GUID}-tasks:${devTag}", "${devProject}/${GUID}-tasks:${prodTag}")
                }
              }
            }
      }

    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    stage('Blue/Green Production Deployment') {
      steps {
                  echo "Blue/Green Deployment"
            script {
              openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                  activeApp = openshift.selector("route", "tasks").object().spec.to.name
                  if (activeApp == "tasks-green") {
                    destApp = "tasks-blue"
                  }
                  echo "Active Application:      " + activeApp
                  echo "Destination Application: " + destApp
        
                  // Update the Image on the Production Deployment Config
                  def dc = openshift.selector("dc/${destApp}").object()
        
                  dc.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/${GUID}-tasks:${prodTag}"
        
                  openshift.apply(dc)
        
                  // Update Config Map in change config files changed in the source
                  openshift.selector("configmap", "${destApp}-config").delete()
                  def configmap = openshift.create("configmap", "${destApp}-config", "--from-file=./openshift-tasks/configuration/application-users.properties", "--from-file=./openshift-tasks/configuration/application-roles.properties" )
        
                    sh 'oc set env dc/tasks VERSION=${prodTag} (tasks-dev)'
                  // Deploy the inactive application.
                  openshift.selector("dc", "${destApp}").rollout().latest();
        
                  // Wait for application to be deployed
                  def dc_prod = openshift.selector("dc", "${destApp}").object()
                  def dc_version = dc_prod.status.latestVersion
                  def rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                  echo "Waiting for ${destApp} to be ready"
                  while (rc_prod.spec.replicas != rc_prod.status.readyReplicas) {
                    sleep 5
                    rc_prod = openshift.selector("rc", "${destApp}-${dc_version}").object()
                  }
                }
              }
            }
      }
    }

    stage('Switch over to new Version') {
      steps{
        echo "Switching Production application to ${destApp}."
                    script {
              openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                  def route = openshift.selector("route/tasks").object()
                  route.spec.to.name="${destApp}"
                  openshift.apply(route)
                }
              }
            }
      }
    }
  }
}
