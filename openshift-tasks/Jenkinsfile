//def GUID = "b63e"
//def mvnCmd      = "mvn -s ./nexus_settings.xml"
//def devProject  = "${GUID}-tasks-dev"
//def prodProject = "${GUID}-tasks-prod"
//imageName   = "${GUID}-tasks"
//def devTag      = "0.0-0"
//def prodTag     = "0.0"
//def destApp     = "tasks-green"
//def activeApp   = ""

pipeline {
    agent {
    // Using the Jenkins Agent Pod that we defined earlier
    label "maven-appdev"
  }
 environment {
 
def GUID = "b63e"
def mvnCmd      = "mvn -s ./nexus_settings.xml"
def devProject  = "${GUID}-tasks-dev"
def prodProject = "${GUID}-tasks-prod"
imageName   = "${GUID}-tasks"
def devTag      = "0.0-0"
def prodTag     = "0.0"
def destApp     = "tasks-green"
def activeApp   = ""
 }
  stages {
    // Checkout Source Code.
    stage('Checkout Source') {
      steps {
        checkout scm
        echo "The code has been checked out"

        script {
            def pom = readMavenPom file: './openshift-tasks/pom.xml'
            def version = pom.version

            // Set the tag for the development image: version + build number
            devTag  = "${version}-" + currentBuild.number
            // Set the tag for the production image: version
            prodTag = "${version}"

            // Patch Source artifactId to include GUID
            sh "sed -i 's/GUID/${GUID}/g' ./openshift-tasks/pom.xml"
          }

      }
    }

    // Build the Tasks Application in the directory 'openshift-tasks'
    stage('Build war') {
      steps {
         sh '''cd openshift-tasks
         ${mvnCmd} clean package -DskipTests=true''' 
      }

    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      steps {
        echo "Running maven tests"
       //  sh '''cd openshift-tasks
       //  ${mvnCmd} test''' 
      }
    }
    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      steps {
        dir('openshift-tasks') {
       sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://homework-sonarqube.apps.shared.na.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}
        }
      }
    }
    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      steps {
        dir('openshift-tasks') {
          echo "Publish to Nexus"

          // TBD: Publish to Nexus

        }
      }
    }
    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      steps {
        dir('openshift-tasks') {
          echo "Building OpenShift container image ${imageName}:${devTag} in project ${devProject}."

        }
      }
    }
    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      steps {
        dir('openshift-tasks') {
          echo "Deploying container image to Development Project"
        }
      }
    }

    // Copy Image to Nexus Container Registry
    stage('Copy Image to Nexus Container Registry') {
      steps {
        echo "Copy image to Nexus Container Registry"
      }
    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    stage('Blue/Green Production Deployment') {
      steps {
        echo "Blue Green production Deployment"
      }
    }

    stage('Switch over to new Version') {
      steps{
        echo "Switching Production application to ${destApp}."
      }
    }
  }
}
